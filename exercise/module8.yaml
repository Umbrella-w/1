#testweb.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
  namespace: default
  labels:
    app: httpserver
    version: v0.1
spec:
  replicas: 1
  selector: # 选择器
    matchLabels: # 匹配标签
      app: httpserver
      version: v0.1
  template:
    metadata: # 资源的元数据/属性 
      annotations: # 自定义注解列表
        sidecar.istio.io/inject: "false" # 自定义注解名字
      labels: # 设定资源的标签
        app: httpserver
        version: v0.1
    spec: # 资源规范字段
      containers:
      - name: httpserver # 容器的名字   
        image: umbrellacn/webtest:latest # 容器使用的镜像地址   
        imagePullPolicy: IfNotPresent 
        resources: # 资源管理
          limits: # 最大使用
            cpu: 2000m # CPU，1核心 = 1000m
            memory: 5000Mi # 内存，1G = 1024Mi
          requests:  # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行
            cpu: 1000m
            memory: 3000Mi
        livenessProbe: # pod 内部健康检查的设置
          httpGet: # 通过httpget检查健康，返回200-399之间，则认为容器正常
            path: /healthz # URI地址
            port: 80 # 端口
            scheme: HTTP # 协议
            # host: 127.0.0.1 # 主机地址
          initialDelaySeconds: 30 # 表明第一次检测在容器启动后多长时间后开始
          timeoutSeconds: 5 # 检测的超时时间
          periodSeconds: 30 # 检查间隔时间
          successThreshold: 1 # 成功门槛
          failureThreshold: 3 # 失败门槛，连接失败3次，pod杀掉，重启一个新的pod
        readinessProbe: # Pod 准备服务健康检查设置
          httpGet:
            path: /healthz
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        ports:
          - name: http # 名称
            containerPort: 80 # 容器开发对外的端口 
            protocol: TCP # 协议


#service.yaml 
apiVersion: v1
kind: Service
metadata:
  name: httpserver-svc
  namespace: default
  labels:
    app: httpserver
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: httpserver
